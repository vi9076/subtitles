1
00:00:00,501 --> 00:00:03,818
大家晚安，我們擔誤了一點時間

2
00:00:04,004 --> 00:00:05,804
所以我們馬上開始

3
00:00:05,804 --> 00:00:08,714
非常歡迎大家來參加今天的活動

4
00:00:08,743 --> 00:00:11,939
今天我們活動的主題是介紹兩個開發板

5
00:00:12,316 --> 00:00:15,116
第一個叫LinkIt Smart 7688

6
00:00:15,174 --> 00:00:18,764
最近非常的紅，在社群上很多朋友在玩它

7
00:00:19,725 --> 00:00:24,645
今天我們請來的講者都是大神級的

8
00:00:25,414 --> 00:00:28,974
第一個是SeeedStudio的資深工程師 -- Yihui

9
00:00:34,095 --> 00:00:38,477
Yihui參與7688還有RePhone還有Wio Link

10
00:00:38,977 --> 00:00:41,529
和滿多其它項目的開發

11
00:00:41,779 --> 00:00:45,779
然後第二個是聯發科的前端工程師 -- Blue 陳柏儒

12
00:00:46,789 --> 00:00:49,439
大家都認識他了，所以就不用介紹了

13
00:00:49,711 --> 00:00:53,711
然後第三個 -- Sam，現在正在裝鍋子的大神

14
00:00:54,966 --> 00:00:58,986
上禮拜參加Mobile Hero通訊大賽，拿到亞軍

15
00:00:59,107 --> 00:01:02,207
今天demo的是用SeeedStudio的產品

16
00:01:02,259 --> 00:01:04,639
叫RePhone，做的智能電子鍋

17
00:01:04,944 --> 00:01:07,304
然後，他的同伴 (Casear)

18
00:01:07,858 --> 00:01:10,928
則是full stack的高手

19
00:01:11,094 --> 00:01:14,004
然後Makee團隊待會會跟大家介紹

20
00:01:14,004 --> 00:01:17,314
怎麼用7688去寫Python，跟做一些控制

21
00:01:17,452 --> 00:01:20,872
他們用7688做了實境的四驅車

22
00:01:20,902 --> 00:01:23,452
影片在Youtube上都有

23
00:01:23,653 --> 00:01:25,183
然後最後是我 (Jollen)

24
00:01:25,203 --> 00:01:26,493
那今天的議程安排

25
00:01:27,576 --> 00:01:30,786
待會我會先開場

26
00:01:31,021 --> 00:01:34,931
大概講半小時OpenWRT

27
00:01:35,121 --> 00:01:39,961
然後再來我們就請Yihui、Blue，還有Sam、Makee團隊

28
00:01:39,974 --> 00:01:41,074
跟大家介紹

29
00:01:41,189 --> 00:01:43,599
然後因為可能還有很多人陸續進來

30
00:01:43,599 --> 00:01:44,789
所以我就開場

31
00:01:44,854 --> 00:01:48,854
讓後面進來的人可以聽到其他大神的演講

32
00:01:50,280 --> 00:01:51,230
那今天...

33
00:01:55,365 --> 00:01:57,505
在演講之前

34
00:01:57,548 --> 00:02:00,988
我很快用一分鐘demo一個東西

35
00:02:01,488 --> 00:02:06,288
這個是Yihui今天才剛帶過來，熱騰騰的開發版

36
00:02:07,197 --> 00:02:08,097
Wio Link

37
00:02:08,994 --> 00:02:11,844
應該是第一次在台灣現身

38
00:02:11,867 --> 00:02:16,377
下午我就跟他在一家咖啡店，請他幫忙

39
00:02:16,486 --> 00:02:18,086
我把它的firmware換掉

40
00:02:18,153 --> 00:02:20,253
換成NodeMCU的firmware

41
00:02:20,253 --> 00:02:24,183
然後很快寫了一隻小程式，可以用來拍照

42
00:02:24,477 --> 00:02:26,237
那在旁邊的桌子上

43
00:02:26,326 --> 00:02:27,856
我放了一個GoPro

44
00:02:27,859 --> 00:02:29,139
這裡有個按鈕

45
00:02:30,543 --> 00:02:34,213
按下去，大家應該會聽到GoPro拍照的聲音

46
00:02:36,443 --> 00:02:39,053
大概半個小時就做完了

47
00:02:41,043 --> 00:02:44,523
可以打造這種產品

48
00:02:45,234 --> 00:02:48,814
當然用Wio Link也可以，用7688也可以

49
00:02:49,200 --> 00:02:50,720
原理很簡單

50
00:02:50,720 --> 00:02:54,440
因為在GoPro裡面其實藏了一個web server

51
00:02:54,527 --> 00:02:57,547
你只要去hack它，就知道它的REST API是什麼

52
00:02:58,050 --> 00:03:00,610
我們就用7688或是Wio Link

53
00:03:00,770 --> 00:03:02,880
去call API就可以了

54
00:03:03,126 --> 00:03:06,656
開機的時候可以設成AP模式之後連上它

55
00:03:06,871 --> 00:03:08,801
call他的web server API

56
00:03:08,877 --> 00:03:10,867
所以，其實是非常好玩的

57
00:03:11,532 --> 00:03:14,242
等一下Yihui的演講裡面

58
00:03:14,321 --> 00:03:18,431
也會跟大家稍微提一個滿新的概念

59
00:03:18,494 --> 00:03:19,974
叫做WoT

60
00:03:24,730 --> 00:03:27,860
今天很快跟各位用一些時間

61
00:03:27,860 --> 00:03:32,440
介紹一下7688裡面OpenWRT的套件

62
00:03:32,686 --> 00:03:34,986
我會很快的run down一下

63
00:03:35,016 --> 00:03:38,296
從下載source code、編譯firmware

64
00:03:38,568 --> 00:03:41,928
可能裡面有需要新增一些kernel module

65
00:03:41,938 --> 00:03:43,961
一些驅動程式

66
00:03:44,025 --> 00:03:46,205
有一些額外的套件

67
00:03:46,205 --> 00:03:48,625
把整個過程大概rundown一下

68
00:03:48,643 --> 00:03:50,423
網路上其實都找得到文件

69
00:03:50,645 --> 00:03:54,525
我今天會再整理一次，放在我的GitHub上

70
00:03:55,189 --> 00:03:59,159
相信今天這樣的整理，應該會幫助大家節省時間

71
00:03:59,169 --> 00:04:01,239
減少搜尋文件的時間

72
00:04:04,397 --> 00:04:08,517
今天大概講四個7688比較重要的主題

73
00:04:08,753 --> 00:04:12,673
第一個是它用的embedded Linux的發佈版本

74
00:04:12,771 --> 00:04:13,641
叫做OpenWRT

75
00:04:15,135 --> 00:04:17,475
OpenWRT的歷史沿革

76
00:04:17,475 --> 00:04:19,235
還有它的起源跟用途

77
00:04:19,338 --> 00:04:21,598
待會Yihui也會幫大家做介紹

78
00:04:22,934 --> 00:04:25,094
然後可能需要在7688上面

79
00:04:25,992 --> 00:04:28,322
安裝一個USB網卡

80
00:04:29,471 --> 00:04:33,131
因為7688，你把它當作AP在用的時候

81
00:04:34,130 --> 00:04:36,150
它還是需要一個網路對外

82
00:04:37,423 --> 00:04:40,643
我們可以去光華商場買到那種很便宜的

83
00:04:41,321 --> 00:04:44,271
Realtek的WiFi USB stick

84
00:04:44,887 --> 00:04:46,537
把它接在7688上

85
00:04:47,783 --> 00:04:52,303
這個時候你就需要Realtek的相關驅動程式

86
00:04:52,775 --> 00:04:54,225
這些default都沒有

87
00:04:54,271 --> 00:04:56,181
你可去把它打勾以及編譯

88
00:04:56,284 --> 00:04:58,734
我等一下會很快rundown一下這個過程

89
00:04:59,611 --> 00:05:01,721
再來編好的firmware裡面

90
00:05:01,771 --> 00:05:04,541
其實是一個小型的root filesystem

91
00:05:04,561 --> 00:05:07,261
包含像BusyBox這樣的套件

92
00:05:07,331 --> 00:05:09,291
這個套件裡面有很多工具

93
00:05:09,822 --> 00:05:11,752
也有額外的一些application

94
00:05:12,147 --> 00:05:15,487
今天我用一個比較簡單的題目，叫做ffmpeg

95
00:05:16,193 --> 00:05:19,393
因為7688的firmware，default沒有ffmpeg

96
00:05:19,934 --> 00:05:22,914
可是我想在上面接一個web cam

97
00:05:22,914 --> 00:05:24,914
然後用ffmpeg去做串流

98
00:05:25,194 --> 00:05:27,494
做HTTP的live streaming

99
00:05:28,235 --> 00:05:30,705
怎麼去編譯，等一下也會很快的rundown一下

100
00:05:31,605 --> 00:05:33,405
然後，root filesystem裡面

101
00:05:33,405 --> 00:05:35,725
有一些很重要的service daemon

102
00:05:35,955 --> 00:05:37,065
像mDNS

103
00:05:38,941 --> 00:05:41,731
很快介紹一下、幫大家起個頭

104
00:05:44,081 --> 00:05:47,241
基本上，它是一個embedded Linux的發佈套件

105
00:05:47,261 --> 00:05:51,261
最早最早，其實是Open Embedded專案開始

106
00:05:51,290 --> 00:05:53,610
然後衍生出來的

107
00:05:54,043 --> 00:05:57,043
Open Embedded是一個編譯系統

108
00:05:58,146 --> 00:06:02,146
我最早接觸它的前身，OpenWRT的前身

109
00:06:02,578 --> 00:06:05,708
是古老之前，將近十年前

110
00:06:05,708 --> 00:06:07,098
已經十年前了

111
00:06:07,546 --> 00:06:10,446
台灣有一個開放源碼的專案，叫OpenMoko

112
00:06:10,868 --> 00:06:14,008
從那時候開始用這樣的編譯系統

113
00:06:14,787 --> 00:06:16,007
OpenWRT裡面

114
00:06:16,227 --> 00:06:19,347
基本就是一些常用的工具跟指令

115
00:06:19,807 --> 00:06:21,197
util-linux

116
00:06:22,729 --> 00:06:25,239
uClibc，這是標準C程式庫，大家都曉得

117
00:06:25,615 --> 00:06:28,615
BusyBox，這個也是耳熟能詳的發佈套件

118
00:06:28,675 --> 00:06:30,105
裡面有很多工具指令

119
00:06:30,156 --> 00:06:33,606
你可能有一些常用的Linux command、或utilities

120
00:06:33,617 --> 00:06:36,457
沒有的話，就進去它的選單打勾就好了

121
00:06:37,219 --> 00:06:41,099
最後，OpenWRT裡內建web管理介面

122
00:06:41,099 --> 00:06:42,869
這個大家應該都看過

123
00:06:42,869 --> 00:06:44,429
今天就不特別介紹

124
00:06:45,735 --> 00:06:50,465
第一件事情，要準備一台Ubuntu電腦

125
00:06:51,477 --> 00:06:54,837
然後把缺乏的套件補上

126
00:06:55,435 --> 00:06:58,015
這個，unzip是必要的

127
00:06:58,339 --> 00:07:04,849
這個在7688官方的GitHub文件，少列了這個

128
00:07:06,053 --> 00:07:10,763
再來是要把OpenWRT的source code，clone下來

129
00:07:32,860 --> 00:07:34,530
clone下來後，就長這樣子

130
00:07:34,740 --> 00:07:37,950
所有的東西，他都打包成distribution

131
00:07:38,027 --> 00:07:40,847
就是發佈套件，其實還滿方便的

132
00:07:41,247 --> 00:07:44,437
check out的話，可以用15.05的版本

133
00:07:44,499 --> 00:07:47,489
這是在7688官方GitHub上文件上講的

134
00:07:48,149 --> 00:07:50,029
這是最新的master

135
00:07:50,290 --> 00:07:54,140
通常編譯都會有問題，不會成功 (<i>笑</i>)

136
00:07:57,751 --> 00:08:01,751
feeds，就是客製化的套件

137
00:08:02,812 --> 00:08:05,662
OpenWRT的feeds意思是這樣

138
00:08:07,518 --> 00:08:10,998
聯發科，MediaTek Labs有提供7688的feeds

139
00:08:11,166 --> 00:08:13,876
所以你要把他的feeds，加到這個設定檔

140
00:08:16,449 --> 00:08:19,809
這是7688官方提供的套件

141
00:08:19,830 --> 00:08:21,850
最後二個指令就不用講了

142
00:08:23,543 --> 00:08:26,553
最後，要先下一個叫做...

143
00:08:31,795 --> 00:08:32,795
(make prereq)

144
00:08:32,805 --> 00:08:37,085
去檢查一些必要的東西

145
00:08:39,364 --> 00:08:44,514
再來，進到選單 (make menuconfig)

146
00:08:45,117 --> 00:08:49,407
make prereq只有在第一次才需要執行

147
00:08:49,770 --> 00:08:53,166
把OpenWRT下載之後，去用它的第一次

148
00:08:53,166 --> 00:08:55,386
之後都直接進menuconfig就可以了

149
00:08:59,093 --> 00:09:02,163
這個選單，整合了BusyBox、kernel config

150
00:09:02,252 --> 00:09:03,172
東西很多

151
00:09:04,570 --> 00:09:06,120
有空就慢慢看

152
00:09:06,389 --> 00:09:11,579
就會知道裡面幫大家打包了哪一些套件

153
00:09:11,756 --> 00:09:14,536
根據網路上的說明，有超過2000個套件

154
00:09:15,879 --> 00:09:17,259
應有盡有

155
00:09:19,268 --> 00:09:22,568
聯發科說要把這些選項，勾選正確

156
00:09:23,042 --> 00:09:27,292
第一個是Target System -- Ralink

157
00:09:29,518 --> 00:09:36,518
再來是MT7688 based boards

158
00:09:36,650 --> 00:09:39,640
下一個，Profile

159
00:09:40,506 --> 00:09:41,916
看就知道

160
00:09:44,997 --> 00:09:46,807
然後下編譯指令

161
00:09:48,888 --> 00:09:50,488
離開，然後記得存檔

162
00:09:50,488 --> 00:09:52,718
因為我沒有變更，沒有問我要不要儲存

163
00:09:58,801 --> 00:10:00,531
這樣的畫面會比較多 (make V=99)

164
00:10:00,531 --> 00:10:03,381
就是我們講的，冗長(?)

165
00:10:04,492 --> 00:10:05,922
一大堆亂七八糟的訊息

166
00:10:05,950 --> 00:10:07,720
如果你不想看的話，也不用加

167
00:10:09,912 --> 00:10:14,852
像我的server是四核心

168
00:10:14,904 --> 00:10:20,834
編譯比較大包的distribution的時候，我會去開Amazon的instance

169
00:10:20,865 --> 00:10:23,785
去開四核、不然就八核心的instance

170
00:10:23,824 --> 00:10:27,204
編完之後再關掉，很為很貴啊，要算時間的

171
00:10:27,672 --> 00:10:31,672
這個是四核心，可以用八個線程去編譯

172
00:10:34,842 --> 00:10:38,842
-j, 後面是CPU數量乘以二，這是慣例

173
00:10:39,086 --> 00:10:42,046
最後，編好的fimrware檔在這裡

174
00:10:45,921 --> 00:10:47,031
我們等它一下

175
00:10:59,392 --> 00:11:03,252
我這幾個禮拜試用7688，有一個感覺

176
00:11:05,849 --> 00:11:08,899
假設要以embedded Linux當做學習主題的話

177
00:11:09,322 --> 00:11:12,402
現在學embedded Linux的工程師，真的是好幸福

178
00:11:12,952 --> 00:11:15,402
不像以前，用的開發板很痛苦

179
00:11:15,743 --> 00:11:17,593
為什麼會很痛苦就不講了

180
00:11:17,876 --> 00:11:19,466
不知道的才是幸福

181
00:11:20,813 --> 00:11:25,413
比如說光是download Linux就要花好多杯咖啡的時間

182
00:11:25,509 --> 00:11:26,909
一次喝掉四杯

183
00:11:27,271 --> 00:11:30,901
然後發現它又錯誤，都很想哭

184
00:11:30,934 --> 00:11:31,994
再回去重新編譯

185
00:11:32,818 --> 00:11:36,558
也沒有像OpenWRT這麼方便的發佈套件

186
00:11:36,989 --> 00:11:42,459
甚至有時候你要從source code解壓，然後執行configure

187
00:11:42,590 --> 00:11:43,740
這個指令開始

188
00:11:44,110 --> 00:11:45,980
我看有幾個朋友點頭

189
00:11:46,107 --> 00:11:47,517
應該我們是同一個世代

190
00:11:50,741 --> 00:11:52,661
現在真的是滿幸福

191
00:11:53,236 --> 00:11:56,336
對，其實可以把它當做一台小的Linux PC

192
00:11:56,336 --> 00:12:00,206
可以在裡面學習怎麼寫Linux的programming

193
00:12:00,470 --> 00:12:04,900
拿到學校去當教學平台，其實滿不錯的

194
00:12:06,223 --> 00:12:09,583
編譯好之後呢，就像講義講的

195
00:12:09,667 --> 00:12:13,127
可以在一個地方找到最後的firmware

196
00:12:19,390 --> 00:12:21,920
然後就把它更新就好

197
00:12:21,973 --> 00:12:23,163
更新的方法有二個

198
00:12:23,204 --> 00:12:25,974
一個用USB，YouTube上有一篇

199
00:12:26,672 --> 00:12:31,182
那是我們的Macpaul大大，在這邊，他製作的影片

200
00:12:31,785 --> 00:12:34,485
不然就是用它的web介面也可以

201
00:12:34,496 --> 00:12:37,666
再不行，去問陳柏儒就好了，他在旁邊

202
00:12:42,478 --> 00:12:44,038
我這禮拜在做一個東西

203
00:12:44,156 --> 00:12:48,496
就是想用7688接web cam，做視訊串流

204
00:12:48,834 --> 00:12:50,749
不過我的視訊串流的架構

205
00:12:50,749 --> 00:12:52,989
跟一般網路上看到的，有點不一樣

206
00:12:53,574 --> 00:12:57,094
我是想先把視訊推送到一台server

207
00:12:57,240 --> 00:12:59,940
server再推送給所有的user

208
00:13:00,050 --> 00:13:02,840
而不是由7688直接推送給所有的user

209
00:13:03,725 --> 00:13:05,105
是用server等級的

210
00:13:05,146 --> 00:13:06,746
因為這樣處理才會來得及

211
00:13:07,266 --> 00:13:10,206
7688也才不會那麼忙錄

212
00:13:10,710 --> 00:13:14,040
Anyway，我需要用HLS

213
00:13:14,839 --> 00:13:16,459
HTTP的live streaming

214
00:13:17,054 --> 00:13:19,627
這是Apple的串流技術

215
00:13:19,627 --> 00:13:21,887
把它推送到server上

216
00:13:22,006 --> 00:13:26,006
最容易的方法，就是用ffmpeg去下一個command

217
00:13:26,861 --> 00:13:28,661
然後裡面沒有

218
00:13:29,194 --> 00:13:32,504
沒有也不礙事，就進到menuconfig，然後打勾

219
00:13:52,438 --> 00:13:56,438
把它勾選成M，就是modularize就可以了

220
00:13:57,275 --> 00:14:01,755
因為只需要多編譯出一個套件

221
00:14:01,755 --> 00:14:04,315
所以不需要整個firmware更新

222
00:14:04,818 --> 00:14:10,518
就download到板子上，然後用opkg去install就可以了

223
00:14:11,308 --> 00:14:12,438
就把他打勾

224
00:14:14,635 --> 00:14:18,435
它有一些相依套件，比如說ffmpeg的library

225
00:14:19,244 --> 00:14:22,284
所以等一下，其實必需要把二個套件

226
00:14:22,444 --> 00:14:24,414
第一個叫libffmpeg

227
00:14:24,416 --> 00:14:27,356
第二個就是ffmpeg套件，總共二個

228
00:14:27,737 --> 00:14:30,907
必須把它download到開發板上面

229
00:14:46,546 --> 00:14:49,316
學Linux程式設計，最常用的command line

230
00:14:49,316 --> 00:14:52,036
大概就是find跟grep

231
00:14:53,123 --> 00:14:56,573
把ffmpeg還有它的library，這二個檔案

232
00:14:57,393 --> 00:15:02,093
透過網路把它copy到板子去安裝就好了

233
00:15:02,252 --> 00:15:05,242
把它scp進去、install就可以了

234
00:15:05,290 --> 00:15:08,980
不需要整個firmware重新安裝

235
00:15:09,591 --> 00:15:12,731
更進一步，你也可以製作自己的feeds

236
00:15:13,767 --> 00:15:16,567
請參考OpenWRT的手冊

237
00:15:19,680 --> 00:15:22,620
去加套件、加一些指令，這麼多東西

238
00:15:22,963 --> 00:15:26,403
所以，其實7688不是那麼重要

239
00:15:27,467 --> 00:15:30,897
embedded Linux，就是Linux系統管理面的一些知識

240
00:15:30,897 --> 00:15:32,277
反倒是重點

241
00:15:32,592 --> 00:15:34,652
只不過說以前玩Linux

242
00:15:34,652 --> 00:15:38,242
可能一台PC、一台server，太麻煩了

243
00:15:38,961 --> 00:15:42,961
現在有個東西，放在口袋就可以當Linux PC了

244
00:15:43,104 --> 00:15:45,074
所以7688確實是個好東西

245
00:15:46,517 --> 00:15:50,127
另外就是我們要支持國貨，不要去用別人做的

246
00:15:53,396 --> 00:15:53,806
好!

247
00:15:56,307 --> 00:15:59,097
這剛才講的，把它scp到板子上之後

248
00:15:59,109 --> 00:16:03,559
就用opkg，去把它install起來就好了

249
00:16:04,183 --> 00:16:06,373
這邊我就不demo

250
00:16:06,634 --> 00:16:09,444
再來，kernel module，這個也是滿常見的

251
00:16:09,836 --> 00:16:12,056
滿常見的issue

252
00:16:13,932 --> 00:16:17,542
家裡有不要用的USB網卡，接到7688

253
00:16:19,070 --> 00:16:22,050
我家的都是Realtek的，不知道為什麼

254
00:16:22,066 --> 00:16:23,236
怎麼都是Realtek

255
00:16:24,715 --> 00:16:26,195
可能比較便宜吧，我在猜

256
00:16:27,295 --> 00:16:30,005
然後你們就可以從kernel modules這裡面

257
00:16:31,254 --> 00:16:32,594
去找到...

258
00:16:36,454 --> 00:16:38,154
相關的一些選項

259
00:16:40,934 --> 00:16:43,374
或是device drives的選項

260
00:16:49,869 --> 00:16:51,939
802.11的library

261
00:16:52,189 --> 00:16:53,359
跟它的stack

262
00:16:59,743 --> 00:17:02,853
這是在我家撿到的Realtek 8188的...

263
00:17:04,407 --> 00:17:07,137
咦，不是EU，是另外一個

264
00:17:08,463 --> 00:17:13,503
818x的USB wireless stick

265
00:17:14,686 --> 00:17:16,146
那一樣把它編譯

266
00:17:16,146 --> 00:17:20,956
編譯完把kernel module copy到板子就好

267
00:17:27,630 --> 00:17:32,950
(find ./ -name "*.ko" -print)

268
00:17:36,713 --> 00:17:42,313
我比較偷懶，就會把它整個modules目錄全部打包

269
00:17:42,327 --> 00:17:46,057
把它的tarball，就是壓縮包，copy到板子上，再去解壓

270
00:17:46,087 --> 00:17:47,507
就不要一個一個copy

271
00:17:48,388 --> 00:17:50,998
怎麼知道編出來的東西放在哪邊呢?

272
00:17:51,684 --> 00:17:54,594
就是使用率排行榜第一名的指令，叫find

273
00:17:58,475 --> 00:17:59,385
驅動程式

274
00:18:01,412 --> 00:18:05,132
大概就是額外的套件、然後額外的驅動程式

275
00:18:08,183 --> 00:18:11,393
我就把7688接了一個USB網卡

276
00:18:11,518 --> 00:18:13,208
讓它可以連到Internet

277
00:18:13,743 --> 00:18:16,803
因為它上面的WiFi，我要當做AP來用

278
00:18:17,989 --> 00:18:20,479
去接手機或接我的電腦

279
00:18:20,565 --> 00:18:21,985
這需要二個WiFi

280
00:18:24,873 --> 00:18:27,433
另外就是USB的web cam

281
00:18:27,847 --> 00:18:30,397
我要用ffmpeg做streaming

282
00:18:30,792 --> 00:18:34,652
這樣就有一個小型的家用視訊監控器

283
00:18:38,523 --> 00:18:40,215
那streaming到server上之後

284
00:18:40,215 --> 00:18:43,605
當然你可以在網頁或手機app去看到它

285
00:18:43,605 --> 00:18:47,475
這個部份，今天就不另外做介紹

286
00:18:49,030 --> 00:18:51,890
額外的kernel module怎麼編譯、怎麼安裝

287
00:18:55,764 --> 00:19:00,774
好！開機之後，你會發現7688裡面有很多service daemon

288
00:19:01,171 --> 00:19:03,531
照理說，如果今天是在學校上課

289
00:19:03,531 --> 00:19:04,831
老師要一個一個講

290
00:19:04,831 --> 00:19:06,211
像這種就要很有耐心

291
00:19:06,586 --> 00:19:09,736
才能夠把技術學到很透徹

292
00:19:10,744 --> 00:19:15,854
應該比如買一本... Ubuntu Linux系統管理的書，回家 K

293
00:19:16,992 --> 00:19:19,622
或是去買LPIC認證考試的書

294
00:19:19,622 --> 00:19:20,962
那個整理的比較好

295
00:19:21,491 --> 00:19:25,001
去買101、102這二本，回來K

296
00:19:25,023 --> 00:19:26,363
因為它會告訴我們

297
00:19:26,372 --> 00:19:29,122
系統管理的工具跟設定檔是什麼

298
00:19:29,672 --> 00:19:32,352
不過有些工具的設定檔的路徑跟內容

299
00:19:32,352 --> 00:19:34,392
跟OpenWRT又不太一樣

300
00:19:34,392 --> 00:19:35,922
那倒是沒有差別

301
00:19:36,282 --> 00:19:39,152
這些細節，我們都可以隨機應變的

302
00:19:39,708 --> 00:19:40,918
只是說，第一個

303
00:19:41,206 --> 00:19:45,206
這個什麼avahi? 不知道在high什麼 (<i>笑</i>)

304
00:19:45,473 --> 00:19:47,473
avahi... 到底是什麼東西呢?

305
00:19:47,521 --> 00:19:48,751
這個Ubuntu就有了

306
00:19:49,211 --> 00:19:51,161
這個是...

307
00:19:52,301 --> 00:19:53,791
mDNS的服務

308
00:19:53,791 --> 00:19:57,201
我稍後有用它，所以給他很快講解一個東西

309
00:19:58,565 --> 00:20:01,095
因為今天時間比較少

310
00:20:02,390 --> 00:20:03,770
等一下...

311
00:20:04,437 --> 00:20:07,597
每一個大神在演講的時候，就不要跟著操作

312
00:20:07,597 --> 00:20:08,772
因為這太冒險了

313
00:20:08,772 --> 00:20:12,482
聽都來不及聽，就回去再練習就好了

314
00:20:12,578 --> 00:20:16,268
我等一下會以節錄圖的方式來講解

315
00:20:16,268 --> 00:20:18,221
節省一些時間

316
00:20:18,221 --> 00:20:21,401
然後，裡面有web server、有samba，這個大家都曉得

317
00:20:21,401 --> 00:20:23,971
還有對時，NTP對時

318
00:20:24,233 --> 00:20:28,333
還有像dropbear，是ssh的server跟client

319
00:20:28,618 --> 00:20:32,618
大家比較常聽到的，是這幾個

320
00:20:34,451 --> 00:20:38,041
把7688開機之後，可以發現這個目錄 (/etc/avahi)

321
00:20:38,164 --> 00:20:40,904
這是它的設定檔

322
00:20:42,573 --> 00:20:44,493
這些都是service group

323
00:20:44,763 --> 00:20:47,963
那... mDNS在做什麼的呢?

324
00:20:49,314 --> 00:20:53,414
不然我用7688板子來demo一下好了

325
00:21:05,442 --> 00:21:07,742
mDNS對我來講很重要

326
00:21:07,814 --> 00:21:11,814
因為我是在做一些IoT的demo

327
00:21:13,393 --> 00:21:17,793
我想在區網裡面做服務的discover

328
00:21:17,887 --> 00:21:19,877
去找找看有什麼東西

329
00:21:20,519 --> 00:21:25,359
所以mDNS -- zero config，這樣的服務對我來講很重要

330
00:21:25,485 --> 00:21:28,665
甚至我可以透過mDNS去找到7688

331
00:21:29,336 --> 00:21:33,386
然後用7688 Duo接溫度感測器

332
00:21:34,720 --> 00:21:38,170
會有什麼樣的火花出現呢?

333
00:21:38,208 --> 00:21:40,758
等一下讓Yihui來跟大家介紹

334
00:21:43,651 --> 00:21:48,571
然後，我的7688現在應該是連到同一個AP，沒有錯

335
00:22:05,704 --> 00:22:06,944
我的電腦是Mac

336
00:22:06,944 --> 00:22:09,924
可以在上面找到一個指令，叫做...

337
00:22:12,336 --> 00:22:14,586
(dns-sd)

338
00:22:14,983 --> 00:22:19,073
我們去看一下manual page，看一下man

339
00:22:21,166 --> 00:22:24,176
其中有一個指令是這樣子

340
00:22:24,601 --> 00:22:27,361
(dns-sd -B _http._tcp)

341
00:22:27,361 --> 00:22:29,241
然後這個就是service name (LinkIt Smart7688...)

342
00:22:29,252 --> 00:22:31,135
這個是service type (_http._tcp)

343
00:22:31,135 --> 00:22:33,635
所以我去找一下這個type

344
00:22:33,635 --> 00:22:35,135
能夠提供這個服務的

345
00:22:40,467 --> 00:22:43,777
(cd /etc/avahi/services)

346
00:22:44,053 --> 00:22:46,293
(cat http.service)

347
00:22:46,293 --> 00:22:47,923
這個真是的很好玩

348
00:22:47,943 --> 00:22:51,043
以前從來沒有想過，一台Linux PC

349
00:22:51,043 --> 00:22:54,975
這麼完整的Linux command line環境

350
00:22:54,975 --> 00:22:57,265
可以有這麼小的板子放在口袋

351
00:22:57,746 --> 00:23:00,446
以前大家的開發板都做的很大一張

352
00:23:00,446 --> 00:23:04,196
在唸書的時候，還把它做成行李箱

353
00:23:04,196 --> 00:23:05,306
有點誇張

354
00:23:05,651 --> 00:23:07,901
然後現在把它做到這麼小

355
00:23:08,221 --> 00:23:10,251
真的還滿不錯的，很好用

356
00:23:10,512 --> 00:23:12,242
這是其中一個設定檔

357
00:23:14,072 --> 00:23:18,562
所以我可以在Mac上，有mDNS的Mac上

358
00:23:18,719 --> 00:23:20,469
找到這個服務

359
00:23:23,900 --> 00:23:26,620
找到這個服務之後，我可以這樣子

360
00:23:26,620 --> 00:23:29,780
這些指令讓大家自己查詢

361
00:23:43,575 --> 00:23:46,645
其實我的意思，很簡單

362
00:23:47,039 --> 00:23:48,429
到這個階段

363
00:23:48,949 --> 00:23:54,129
已經不關乎7688、或什麼embedded Linux，或什麼嵌入式系統的關題了

364
00:23:54,529 --> 00:23:58,529
而是涉及到一個更重要的基礎知識，叫Linux系統管理

365
00:24:01,594 --> 00:24:04,274
這是剛才講的 (service group)

366
00:24:04,274 --> 00:24:06,654
一個demo (service discover)

367
00:24:07,744 --> 00:24:13,184
等一下會把這一份slides，commit到我的GitHub上面

368
00:24:14,385 --> 00:24:19,935
GitHub上的名字叫做... 7688-embedded-linux

369
00:24:21,726 --> 00:24:23,486
這個是我的簡報

370
00:24:23,486 --> 00:24:26,426
簡報檔叫index.html

371
00:24:27,116 --> 00:24:28,526
這一份就是

372
00:24:29,015 --> 00:24:33,015
你們可以在GitHub先搜尋我的帳號

373
00:24:39,516 --> 00:24:40,846
我的名字叫Jollen

374
00:24:40,846 --> 00:24:44,846
你們可以到GitHub去搜尋我的名字，叫jollen

375
00:24:44,854 --> 00:24:49,574
應該可以滿容易找到這一份slides，7688-embedded-linux

376
00:24:49,574 --> 00:24:52,467
現在上去看不到，因為我還沒有commit上去

377
00:24:53,914 --> 00:24:56,064
等一下，或回家之後

378
00:24:57,064 --> 00:25:01,064
最後，我想分享一個東西

379
00:25:03,109 --> 00:25:04,729
在我的slides沒有

380
00:25:04,729 --> 00:25:08,859
但是待會Yihui的slides會有

381
00:25:08,859 --> 00:25:11,259
我最近想用Wio Link

382
00:25:11,259 --> 00:25:14,299
這個是ESP8266的開發板

383
00:25:14,979 --> 00:25:17,359
下午玩了一下，我覺得它真的很棒

384
00:25:17,359 --> 00:25:20,299
所以我以後應該就不想用NodeMCU了

385
00:25:20,299 --> 00:25:22,569
下午用了一點時間

386
00:25:23,803 --> 00:25:27,213
把Wio Link的firmware換成NodeMCU的firmware

387
00:25:27,213 --> 00:25:29,492
因為它外接sensor比較方便

388
00:25:29,492 --> 00:25:32,812
不用接shell board，子板

389
00:25:33,853 --> 00:25:37,853
這個我想要回去，把它整個做成溫度感測裝置

390
00:25:39,567 --> 00:25:42,057
放在各個角落

391
00:25:42,057 --> 00:25:46,057
溫度的數據，可以透過某些協定

392
00:25:46,057 --> 00:25:47,982
即時推送到proxy

393
00:25:47,982 --> 00:25:50,377
proxy就是以前我們講的gateway

394
00:25:50,377 --> 00:25:54,337
我想用7688做gateway，應該是滿不錯的一個選擇

395
00:25:54,646 --> 00:25:56,006
gateway的工作

396
00:25:56,006 --> 00:25:58,946
就是把家裡sensor的數據，集中起來之後

397
00:25:58,946 --> 00:26:00,126
往雲端去送

398
00:26:01,033 --> 00:26:04,523
它這麼小，滿符合我的需求

399
00:26:04,939 --> 00:26:06,739
因為我想做一件事情

400
00:26:07,049 --> 00:26:09,549
把它埋到插座裡面

401
00:26:10,282 --> 00:26:12,472
家裡的插座，把它埋進去

402
00:26:13,316 --> 00:26:16,636
甚至可以的話，找我在深圳做硬體的朋友

403
00:26:16,636 --> 00:26:18,686
直接做成牆壁的插座就好

404
00:26:19,832 --> 00:26:22,712
現在不是很多插座都有內置WiFi嗎

405
00:26:22,973 --> 00:26:27,103
把它做成插座，可以embed到家裡的裝潢

406
00:26:27,963 --> 00:26:31,597
不然，板子那麼醜一個，在旁邊，怪怪的

407
00:26:31,617 --> 00:26:33,447
我突然最近有感而發

408
00:26:33,915 --> 00:26:36,685
這種東西，其實可以把它當做成品來看待

409
00:26:37,833 --> 00:26:39,293
product

410
00:26:39,469 --> 00:26:42,169
以前的開發板，大家都當成半成品

411
00:26:43,049 --> 00:26:47,049
板子玩一玩，然後重lay板子，把它做的很漂亮

412
00:26:47,228 --> 00:26:49,628
還要畫機構，還要做ID設計

413
00:26:50,146 --> 00:26:52,576
才能去商店把它買下來

414
00:26:52,736 --> 00:26:55,616
所以我覺得創客時代，真的很有趣

415
00:26:55,616 --> 00:26:58,996
最近剛好有團購

416
00:26:59,128 --> 00:27:02,264
團購了很多，自己也留了很多

417
00:27:02,264 --> 00:27:06,714
自己留起來，想說用過年啊、聖誔節的時間，來玩一玩

418
00:27:06,875 --> 00:27:10,105
把家裡變成IoT的demo room

419
00:27:10,932 --> 00:27:14,932
可以把它的腳全部拿下來，小小一片

420
00:27:17,094 --> 00:27:21,094
做個像繼電器之類的，埋在牆壁裡面

421
00:27:22,064 --> 00:27:23,454
還滿不錯的

422
00:27:23,527 --> 00:27:26,987
所以第一個，我們喜歡它的form factor

423
00:27:27,064 --> 00:27:31,654
第二個，我Linux還算滿熟的，雖然不敢說是最厲害

424
00:27:32,900 --> 00:27:35,620
所以我覺得開發對我來講，很方便

425
00:27:35,620 --> 00:27:40,770
那它除了用大家最耳熟能詳的NodeJS，去寫程式之外

426
00:27:40,788 --> 00:27:44,308
當然也可以用native C啊之類的，這不用講了

427
00:27:44,308 --> 00:27:46,158
然後還可以用Python

428
00:27:46,158 --> 00:27:50,178
待會Makee團隊跟大家介紹Python怎麼用

429
00:27:50,178 --> 00:27:54,178
再來NodeJS的大大陳伯儒在這邊

430
00:27:54,178 --> 00:27:56,578
跟大家介紹NodeJS開發環境

431
00:27:57,332 --> 00:28:03,632
今天結束之後，或許你們可以找Yihui交流一下

432
00:28:03,632 --> 00:28:10,672
因為他前陣子在把Lua porting到RePhone，就是LinkIt ONE上面

433
00:28:10,672 --> 00:28:13,452
Lua我覺得是另外一個選擇

434
00:28:14,992 --> 00:28:19,692
像我的Wio Link，今天做的GoPro remote

435
00:28:19,835 --> 00:28:21,465
就是用Lua寫的

436
00:28:21,465 --> 00:28:26,445
最後，我想分享的，是今天下午在這邊寫的程式

437
00:28:29,056 --> 00:28:30,596
這是用Lua寫的

438
00:28:30,657 --> 00:28:34,947
然後把Wio Link變成GoPro的WiFi remote

439
00:28:34,947 --> 00:28:36,927
按一下就會拍照

440
00:28:37,518 --> 00:28:39,728
接到我的GoPro

441
00:28:39,728 --> 00:28:43,698
然後，這個是GPIO，中斷觸發

442
00:28:44,389 --> 00:28:49,679
中斷觸發之後，對GoPro發出REST API request

443
00:28:51,239 --> 00:28:54,189
GoPro裡面有一個web server，所以它有很多command

444
00:28:55,473 --> 00:28:59,774
hacker把它hack出來，整理成文件，放在網路上

445
00:28:59,774 --> 00:29:04,854
但是我覺得這明明是GoPro官方流出來，要給大家玩的

446
00:29:04,925 --> 00:29:07,225
不然怎麼可能那麼清楚

447
00:29:08,280 --> 00:29:13,300
我昨天剛好在另一個創客空間演講

448
00:29:13,597 --> 00:29:18,497
我也是講GoPro是目前為止我最喜歡的IoT產品

449
00:29:18,617 --> 00:29:20,467
或者說WoT的產品

450
00:29:21,837 --> 00:29:25,187
我們就可以用像Wio Link、7688

451
00:29:25,187 --> 00:29:27,527
很快幫它打造一些周邊

452
00:29:27,892 --> 00:29:30,792
以後就變成像這種產品

453
00:29:30,922 --> 00:29:32,982
本身就是一台server

454
00:29:32,982 --> 00:29:35,422
Google有個概念，叫physical web

455
00:29:35,422 --> 00:29:37,102
似乎就是想要這樣子做

456
00:29:37,402 --> 00:29:39,502
那我們就環繞著一些產品

457
00:29:39,534 --> 00:29:43,134
把它當server，幫它製作周邊

458
00:29:43,612 --> 00:29:47,612
這已經有點跳脫今天我要講的主題

459
00:29:47,612 --> 00:29:49,762
就只是大家分享一下

460
00:29:49,786 --> 00:29:52,956
我的任務就是，講到大家都進來

461
00:29:52,956 --> 00:29:54,766
因為後面的更精采

462
00:29:54,872 --> 00:29:57,162
我的沒有聽到沒關係

463
00:29:57,162 --> 00:30:03,222
最近大家應該在網路上，在MakerPro的社團裡面

464
00:30:03,222 --> 00:30:10,132
看到郭長祐，幫大家整理了一份7688的study roadmap

465
00:30:10,132 --> 00:30:12,052
我個人覺得滿好的

466
00:30:12,052 --> 00:30:17,262
像在我的project裡面，其實只用到7688，沒有用到Duo

467
00:30:17,569 --> 00:30:22,589
因為我是拿Wio Link或是ESP8266，去接感測器

468
00:30:22,753 --> 00:30:26,753
那兩者之間，就不是用什麼UART實體方式去連接

469
00:30:26,775 --> 00:30:28,575
是用CoAP的協定

470
00:30:28,887 --> 00:30:31,357
所以如果以我的部署方式來講的話

471
00:30:31,357 --> 00:30:33,017
其實我只需要7688

472
00:30:33,788 --> 00:30:38,758
所以7688、7688 Duo、或者Arduino，到底可以用在什麼地方

473
00:30:38,758 --> 00:30:41,868
或是怎麼樣去學習

474
00:30:41,868 --> 00:30:43,891
我覺得長祐寫得很不錯

475
00:30:43,891 --> 00:30:47,624
所以今天特別商請他過來，跟大家介紹一下

476
00:30:47,624 --> 00:30:49,453
他的一些心得

477
00:30:49,453 --> 00:30:52,673
如果各位有什麼其它的想法

478
00:30:52,673 --> 00:30:54,433
或者是不同意見的話

479
00:30:54,433 --> 00:30:56,643
我們都可以互相討論

480
00:30:56,745 --> 00:30:58,451
那我們請長祐

481
00:30:58,451 --> 00:31:03,881
我的session就到這邊結束，謝謝大家
