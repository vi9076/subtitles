1
00:00:00,501 --> 00:00:03,818
Good evening, everyone.

2
00:00:04,004 --> 00:00:05,804
We'll start now.

3
00:00:05,804 --> 00:00:08,714
Welcome you all here today and
thank you for attending our presentation.

4
00:00:08,743 --> 00:00:11,939
This topic for tonight is introducing two development boards

5
00:00:12,316 --> 00:00:15,116
The first one is LinkIt Smart 7688

6
00:00:15,174 --> 00:00:18,764
It's very popular among the communities now

7
00:00:19,725 --> 00:00:24,645
Our speakers today are all masters

8
00:00:25,414 --> 00:00:28,974
The first is a senior engineer from SeeedStudio -- Yihui

9
00:00:34,095 --> 00:00:38,477
He is involved in projects like 7688, RePhone, and Wio Link,

10
00:00:38,977 --> 00:00:41,529
and many others.

11
00:00:41,779 --> 00:00:45,779
The second is a front end engineer from MediaTek -- Blue, Bo-Ju Chen

12
00:00:46,789 --> 00:00:49,439
Everyone knows him, so I'll skip the intro.

13
00:00:49,711 --> 00:00:53,711
and the third, Sam. The one who is installing a rice cooker.

14
00:00:54,966 --> 00:00:58,986
Last week he entered 2015 Mobile Hero Contest and got 2nd place.

15
00:00:59,107 --> 00:01:02,207
His demo will come with a SeeedStudio product,

16
00:01:02,259 --> 00:01:04,639
called RePhone. It's a Smart Rice Cooker.

17
00:01:04,944 --> 00:01:07,304
and, his partner, (Casear)

18
00:01:07,858 --> 00:01:10,928
a master in full stack development.

19
00:01:11,094 --> 00:01:14,004
Then the team Makee will show you

20
00:01:14,004 --> 00:01:17,314
How to write Python and do I/O control in 7688.

21
00:01:17,452 --> 00:01:20,872
They made a FPV 4WD remote control car with a 7688.

22
00:01:20,902 --> 00:01:23,452
The video is on Youtube.

23
00:01:23,653 --> 00:01:25,183
and last, this is me (Jollen).

24
00:01:25,203 --> 00:01:26,493
For today's agenda,

25
00:01:27,576 --> 00:01:30,786
I'll start first,

26
00:01:31,021 --> 00:01:34,931
with OpenWRT, around half an hour.

27
00:01:35,121 --> 00:01:39,961
Then Yihui, Blue, Sam, Team Makee

28
00:01:39,974 --> 00:01:41,074
.

29
00:01:41,189 --> 00:01:43,599
.

30
00:01:43,599 --> 00:01:44,789
I'll start the first agenda item.

31
00:01:44,854 --> 00:01:48,854
.

32
00:01:50,280 --> 00:01:51,230
.

33
00:01:55,365 --> 00:01:57,505
Before the topic,

34
00:01:57,548 --> 00:02:00,988
I'll show you something within a minute.

35
00:02:01,488 --> 00:02:06,288
This is a new dev board bring to here by Yihui.

36
00:02:07,197 --> 00:02:08,097
Wio Link.

37
00:02:08,994 --> 00:02:11,844
This should be its debut in Taiwan

38
00:02:11,867 --> 00:02:16,377
This afternoon, in a coffee shop, with his help,

39
00:02:16,486 --> 00:02:18,086
the firmware was replaced

40
00:02:18,153 --> 00:02:20,253
with NodeMCU.

41
00:02:20,253 --> 00:02:24,183
and quickly wrote a program to take photo.

42
00:02:24,477 --> 00:02:26,237
On the desk over there,

43
00:02:26,326 --> 00:02:27,856
it's a GoPro.

44
00:02:27,859 --> 00:02:29,139
Here's a button,

45
00:02:30,543 --> 00:02:34,213
It was pressed, you may heard the GoPro taking a picture.

46
00:02:36,443 --> 00:02:39,053
Just took me half an hour

47
00:02:41,043 --> 00:02:44,523
to made a product like this.

48
00:02:45,234 --> 00:02:48,814
Of course, either Wio Link or 7688 will do.

49
00:02:49,200 --> 00:02:50,720
It's simple behind the scenes.

50
00:02:50,720 --> 00:02:54,440
Because there's a web server inside GoPro.

51
00:02:54,527 --> 00:02:57,547
Just hack it, and you'll know the REST API.

52
00:02:58,050 --> 00:03:00,610
Then we could use either 7688 or Wio Link,

53
00:03:00,770 --> 00:03:02,880
to call the API.

54
00:03:03,126 --> 00:03:06,656
Configure it into AP mode and connect to it,

55
00:03:06,871 --> 00:03:08,801
the web server could be called.

56
00:03:08,877 --> 00:03:10,867
It's a lot of fun.

57
00:03:11,532 --> 00:03:14,242
In the next coming up presentation by Yihui,

58
00:03:14,321 --> 00:03:18,431
He'll mention a new concept

59
00:03:18,494 --> 00:03:19,974
called WoT.

60
00:03:24,730 --> 00:03:27,860
This presentation will introduce

61
00:03:27,860 --> 00:03:32,440
OpenWRT and its packages within 7688.

62
00:03:32,686 --> 00:03:34,986
A quick rundown of

63
00:03:35,016 --> 00:03:38,296
downloading source code, compiling firmware,

64
00:03:38,568 --> 00:03:41,928
installing extra kernel module,

65
00:03:41,938 --> 00:03:43,961
or say driver.

66
00:03:44,025 --> 00:03:46,205
and installing extra packages.

67
00:03:46,205 --> 00:03:48,625
.

68
00:03:48,643 --> 00:03:50,423
Lots of them are already scattered around the web

69
00:03:50,645 --> 00:03:54,525
I'll organize them and put on GitHub.
https://github.com/jollen/7688-embedded-linux

70
00:03:55,189 --> 00:03:59,159
It should a time saver for you.

71
00:03:59,169 --> 00:04:01,239
.

72
00:04:04,397 --> 00:04:08,517
I'll present 4 important topics of 7688.

73
00:04:08,753 --> 00:04:12,673
The first is the embedded Linux distro,

74
00:04:12,771 --> 00:04:13,641
OpenWRT.

75
00:04:15,135 --> 00:04:17,475
Its history,

76
00:04:17,475 --> 00:04:19,235
origin, and usage.

77
00:04:19,338 --> 00:04:21,598
The next coming up by Yihui will have this, too.

78
00:04:22,934 --> 00:04:25,094
The second topic, installing a USB network interface

79
00:04:25,992 --> 00:04:28,322
in 7688.

80
00:04:29,471 --> 00:04:33,131
Because with 7688 in AP mode,

81
00:04:34,130 --> 00:04:36,150
it needs another network interface to access LAN.

82
00:04:37,423 --> 00:04:40,643
We could go Guang Hua Computer Market and buy a cheap

83
00:04:41,321 --> 00:04:44,271
WiFi USB stick with a Realtek chip,

84
00:04:44,887 --> 00:04:46,537
and connect it to 7688.

85
00:04:47,783 --> 00:04:52,303
Then you need to install Realtek drivers to make it work.

86
00:04:52,775 --> 00:04:54,225
It doesn't come with default config.

87
00:04:54,271 --> 00:04:56,181
You need to tick the checkbox and compile.

88
00:04:56,284 --> 00:04:58,734
I'll go through it.

89
00:04:59,611 --> 00:05:01,721
The third topic, inside the firmware,

90
00:05:01,771 --> 00:05:04,541
it's a small footprint filesystem.

91
00:05:04,561 --> 00:05:07,261
contains packages such as BusyBox,

92
00:05:07,331 --> 00:05:09,291
which includes many utilities,

93
00:05:09,822 --> 00:05:11,752
and extra applications

94
00:05:12,147 --> 00:05:15,487
Today I'll use a simple topic called ffmpeg

95
00:05:16,193 --> 00:05:19,393
Because the firmware of 7688 does not include ffmpeg by default.

96
00:05:19,934 --> 00:05:22,914
If I want to connect a web cam to it,

97
00:05:22,914 --> 00:05:24,914
then use ffmpeg to do straming,

98
00:05:25,194 --> 00:05:27,494
HTTP live streaming.

99
00:05:28,235 --> 00:05:30,705
I'll show you how to compile it.

100
00:05:31,605 --> 00:05:33,405
And, inside the root filesystem,

101
00:05:33,405 --> 00:05:35,725
There are some important services,

102
00:05:35,955 --> 00:05:37,065
like mDNS.

103
00:05:38,941 --> 00:05:41,731
I'll make a briefing so that you could study further.

104
00:05:44,081 --> 00:05:47,241
Basically, it's a embbed Linux distro,

105
00:05:47,261 --> 00:05:51,261
which was derived from Open Embedded project.

106
00:05:51,290 --> 00:05:53,610
.

107
00:05:54,043 --> 00:05:57,043
Open Embedded is a "build system"

108
00:05:58,146 --> 00:06:02,146
My first experience with it, was its predecessor,

109
00:06:02,578 --> 00:06:05,708
long long ago, nearly 10 years,

110
00:06:05,708 --> 00:06:07,098
oh, more than 10 years.

111
00:06:07,546 --> 00:06:10,446
There's a open source project, OpenMoko.

112
00:06:10,868 --> 00:06:14,008
I used such a build system from that time.

113
00:06:14,787 --> 00:06:16,007
Inside OpenWRT,

114
00:06:16,227 --> 00:06:19,347
includes many utilities and commands.

115
00:06:19,807 --> 00:06:21,197
util-linux

116
00:06:22,729 --> 00:06:25,239
uClibc, the standard C library, everyone knows it.

117
00:06:25,615 --> 00:06:28,615
BusyBox, the familiar package.

118
00:06:28,675 --> 00:06:30,105
It contains lots of utilities.

119
00:06:30,156 --> 00:06:33,606
If you don't see a particular command inside,

120
00:06:33,617 --> 00:06:36,457
just go to the config menu and tick the checkbox.

121
00:06:37,219 --> 00:06:41,099
and last, OpenWRT has a buildin web interface,

122
00:06:41,099 --> 00:06:42,869
everyone already seen it,

123
00:06:42,869 --> 00:06:44,429
so I'll skip it.

124
00:06:45,735 --> 00:06:50,465
The first thing, prepare an Ubuntu host,

125
00:06:51,477 --> 00:06:54,837
the install necessary packages.

126
00:06:55,435 --> 00:06:58,015
this, unzip, is a required package,

127
00:06:58,339 --> 00:07:04,849
It's not listed in the 7688 official document on GitHub.

128
00:07:06,053 --> 00:07:10,763
Then you clone the OpenWRT source code.

129
00:07:32,860 --> 00:07:34,530
It looks like this after cloning.

130
00:07:34,740 --> 00:07:37,950
all things are packed as distribution,

131
00:07:38,027 --> 00:07:40,847
it's convenient.

132
00:07:41,247 --> 00:07:44,437
For checkout, use the 15.05 release branch.

133
00:07:44,499 --> 00:07:47,489
It's mentioned in the 7688 official document on GitHub.

134
00:07:48,149 --> 00:07:50,029
This is the newest master branch,

135
00:07:50,290 --> 00:07:54,140
but usually you'll get into trouble with it. (<i>laugh</i>)

136
00:07:57,751 --> 00:08:01,751
Feeds, customized packages.

137
00:08:02,812 --> 00:08:05,662
That's the meaning of feeds in OpenWRT.

138
00:08:07,518 --> 00:08:10,998
MediaTek Labs provides feeds for 7688.

139
00:08:11,166 --> 00:08:13,876
You need to add the feeds into this config file.

140
00:08:16,449 --> 00:08:19,809
That's the official 7688 packages.

141
00:08:19,830 --> 00:08:21,850
The last 2 commands are self-describing.

142
00:08:23,543 --> 00:08:26,553
Then, give the command...

143
00:08:31,795 --> 00:08:32,795
(make prereq)

144
00:08:32,805 --> 00:08:37,085
to check the prerequisite.

145
00:08:39,364 --> 00:08:44,514
then, go to the config menu (make menuconfig)

146
00:08:45,117 --> 00:08:49,407
"make prereq" is needed for first time only.

147
00:08:49,770 --> 00:08:53,166
The first time you cloned OpenWRT source code.

148
00:08:53,166 --> 00:08:55,386
After that, you just use menuconfig every time.

149
00:08:59,093 --> 00:09:02,163
This menu, integrates BusyBox, kernel config,

150
00:09:02,252 --> 00:09:03,172
lots of configurations.

151
00:09:04,570 --> 00:09:06,120
Browse among them,

152
00:09:06,389 --> 00:09:11,579
you'll get an idea of what's included.

153
00:09:11,756 --> 00:09:14,536
According to the Internet, more than 2000 packages.

154
00:09:15,879 --> 00:09:17,259
Versatile.

155
00:09:19,268 --> 00:09:22,568
According to MediaTek Labs, make correct choices.

156
00:09:23,042 --> 00:09:27,292
The first one, Target System -- Ralink.

157
00:09:29,518 --> 00:09:36,518
Then MT7688 based boards.

158
00:09:36,650 --> 00:09:39,640
Next, Profile.

159
00:09:40,506 --> 00:09:41,916
It goes without saying.

160
00:09:44,997 --> 00:09:46,807
Next, compile.

161
00:09:48,888 --> 00:09:50,488
Exit, remember to Save.

162
00:09:50,488 --> 00:09:52,718
It won't ask for saving because I didn't make changes.

163
00:09:58,801 --> 00:10:00,531
This will give more verbose messages (make V=99)

164
00:10:00,531 --> 00:10:03,381
.

165
00:10:04,492 --> 00:10:05,922
looks like a mess

166
00:10:05,950 --> 00:10:07,720
just remove it (V=99) and you'll get out of the these.

167
00:10:09,912 --> 00:10:14,852
My server has 4 cores

168
00:10:14,904 --> 00:10:20,834
I'll enable Amazon instances during compilation of large distros.

169
00:10:20,865 --> 00:10:23,785
enable 4- or 8-core instance

170
00:10:23,824 --> 00:10:27,204
and disable it when done. Because it's charged by time.

171
00:10:27,672 --> 00:10:31,672
it has 4 cores, compile with 8 threads.

172
00:10:34,842 --> 00:10:38,842
-j, followed by the number of CPUs*2. It's a well-known skill.

173
00:10:39,086 --> 00:10:42,046
Finally, the finished firmware will be here.

174
00:10:45,921 --> 00:10:47,031
Just wait for it to finish.

175
00:10:59,392 --> 00:11:03,252
I used 7688 these weeks, and an idea came into my mind

176
00:11:05,849 --> 00:11:08,899
For studying embedded Linux,

177
00:11:09,322 --> 00:11:12,402
students are really blissful these days.

178
00:11:12,952 --> 00:11:15,402
The study days at several years ago was painful.

179
00:11:15,743 --> 00:11:17,593
I won't go through the detail of the pain.

180
00:11:17,876 --> 00:11:19,466
Ignorance is bliss.

181
00:11:20,813 --> 00:11:25,413
For example, it will took several cups of coffee

182
00:11:25,509 --> 00:11:26,909
to just download Linux source code, around 4 cups.

183
00:11:27,271 --> 00:11:30,901
even more, compilation errors, totally hopeless...

184
00:11:30,934 --> 00:11:31,994
then went back to compiling again.

185
00:11:32,818 --> 00:11:36,558
and no such a convenient distro like OpenWRT,

186
00:11:36,989 --> 00:11:42,459
sometimes you need to start from source code, run configure,

187
00:11:42,590 --> 00:11:43,740
from the basic command.

188
00:11:44,110 --> 00:11:45,980
I see several friends nodding

189
00:11:46,107 --> 00:11:47,517
we are from the same generation

190
00:11:50,741 --> 00:11:52,661
It's really bliss these days.

191
00:11:53,236 --> 00:11:56,336
Actually, we could consider it as a small Linux PC

192
00:11:56,336 --> 00:12:00,206
learning Linux programming

193
00:12:00,470 --> 00:12:04,900
Take it to school, it's a really good choice as a study platform.

194
00:12:06,223 --> 00:12:09,583
After compiling is finished, like the handout said,

195
00:12:09,667 --> 00:12:13,127
You could find it in this place.

196
00:12:19,390 --> 00:12:21,920
Then perform the firmware update procedure.

197
00:12:21,973 --> 00:12:23,163
There 2 ways to do so

198
00:12:23,204 --> 00:12:25,974
One is by USB, there's a video on YouTube

199
00:12:26,672 --> 00:12:31,182
That's Macpaul, over there, produced by him.

200
00:12:31,785 --> 00:12:34,485
Or use the Web UI

201
00:12:34,496 --> 00:12:37,666
If both do not work well, just ask Bo-Ju Chen, he's there.

202
00:12:42,478 --> 00:12:44,038
I was work with something new this week.

203
00:12:44,156 --> 00:12:48,496
Connect a web cam to 7688, and do live streaming

204
00:12:48,834 --> 00:12:50,749
But my architecture for streaming

205
00:12:50,749 --> 00:12:52,989
is slightly different from others

206
00:12:53,574 --> 00:12:57,094
the stream will be pushed to another server

207
00:12:57,240 --> 00:12:59,940
then the server push the stream the all users

208
00:13:00,050 --> 00:13:02,840
instead of pushing by 7688

209
00:13:03,725 --> 00:13:05,105
push by server-class hardware

210
00:13:05,146 --> 00:13:06,746
Because the push action will be processed on time

211
00:13:07,266 --> 00:13:10,206
and 7688 won't get overloaded.

212
00:13:10,710 --> 00:13:14,040
Anyway, I need HLS,

213
00:13:14,839 --> 00:13:16,459
HTTP Live Streaming.

214
00:13:17,054 --> 00:13:19,627
The streaming technology by Apple.

215
00:13:19,627 --> 00:13:21,887
push the stream to a server.

216
00:13:22,006 --> 00:13:26,006
The easiest way is to run ffmpeg with just a command.

217
00:13:26,861 --> 00:13:28,661
but the the firmware doesn't come with it.

218
00:13:29,194 --> 00:13:32,504
It doesn't matter, just went to menuconfig, make a tick

219
00:13:52,438 --> 00:13:56,438
check it as M, modularize, that's easy.

220
00:13:57,275 --> 00:14:01,755
Because only a new package was compiled,

221
00:14:01,755 --> 00:14:04,315
so no need to update the whole firmware.

222
00:14:04,818 --> 00:14:10,518
download it to the dev board, then opkg install it.

223
00:14:11,308 --> 00:14:12,438
check it

224
00:14:14,635 --> 00:14:18,435
some dependent packages are required, such as ffmpeg library

225
00:14:19,244 --> 00:14:22,284
so we need to download 2 package files,

226
00:14:22,444 --> 00:14:24,414
the first, libffmpeg

227
00:14:24,416 --> 00:14:27,356
the second, ffmpeg

228
00:14:27,737 --> 00:14:30,907
to the dev board.

229
00:14:46,546 --> 00:14:49,316
The most frequently used command during Linux programming,

230
00:14:49,316 --> 00:14:52,036
are probably find and grep.

231
00:14:53,123 --> 00:14:56,573
Copy the package files of ffmpeg and its library

232
00:14:57,393 --> 00:15:02,093
to the dev board via network, then install them.

233
00:15:02,252 --> 00:15:05,242
scp them to the dev board, then install

234
00:15:05,290 --> 00:15:08,980
No need to update the whole firmware.

235
00:15:09,591 --> 00:15:12,731
A step further, you could make your own feeds.

236
00:15:13,767 --> 00:15:16,567
Please refer to OpenWRT manual,

237
00:15:19,680 --> 00:15:22,620
to add more packages, lots of packages here.

238
00:15:22,963 --> 00:15:26,403
So actually, 7688 itself is not the most important.

239
00:15:27,467 --> 00:15:30,897
In embedded Linux, the knowledge of system admin,

240
00:15:30,897 --> 00:15:32,277
is rather the point.

241
00:15:32,592 --> 00:15:34,652
Getting around in Linux before,

242
00:15:34,652 --> 00:15:38,242
you need a big PC or a server, somewhat inconvenient.

243
00:15:38,961 --> 00:15:42,961
Now we have this, a Linux machine that fits in your pocket.

244
00:15:43,104 --> 00:15:45,074
So 7688 is indeed a nice gadget.

245
00:15:46,517 --> 00:15:50,127
Also, support our own products.

246
00:15:53,396 --> 00:15:53,806
.

247
00:15:56,307 --> 00:15:59,097
Just mentioned, scp package files to the dev board,

248
00:15:59,109 --> 00:16:03,559
install them with opkg.

249
00:16:04,183 --> 00:16:06,373
I'll skip it.

250
00:16:06,634 --> 00:16:09,444
Next, kernel module, this is also

251
00:16:09,836 --> 00:16:12,056
a common issue

252
00:16:13,932 --> 00:16:17,542
Connect a spare USB WiFi adapter to 7688.

253
00:16:19,070 --> 00:16:22,050
All of mine have Realtek chip inside, I don't know why.

254
00:16:22,066 --> 00:16:23,236
Why they are all Realtek?

255
00:16:24,715 --> 00:16:26,195
Maybe they are cheap, in my guess.

256
00:16:27,295 --> 00:16:30,005
Then you could come to the list of kernel modules

257
00:16:31,254 --> 00:16:32,594
and find out...

258
00:16:36,454 --> 00:16:38,154
relevant options,

259
00:16:40,934 --> 00:16:43,374
or devices drivers,

260
00:16:49,869 --> 00:16:51,939
802.11 libraries,

261
00:16:52,189 --> 00:16:53,359
and associated stack.

262
00:16:59,743 --> 00:17:02,853
This is the driver for my spare Realtek 8188...

263
00:17:04,407 --> 00:17:07,137
Oh, no EU, another one.

264
00:17:08,463 --> 00:17:13,503
USB wireless stck with 818x chip

265
00:17:14,686 --> 00:17:16,146
The same steps, compile it,

266
00:17:16,146 --> 00:17:20,956
then copy the kernel modules to dev board.

267
00:17:27,630 --> 00:17:32,950
(find ./ -name "*.ko" -print)

268
00:17:36,713 --> 00:17:42,313
My lazy way of copying,

269
00:17:42,327 --> 00:17:46,057
is to create a tarball and copy it, extract it.

270
00:17:46,087 --> 00:17:47,507
So I don't need to copy them individually,

271
00:17:48,388 --> 00:17:50,998
How do you know the location of the compiled binaries?

272
00:17:51,684 --> 00:17:54,594
Just use the command frequency top 1, find.

273
00:17:58,475 --> 00:17:59,385
Drivers.

274
00:18:01,412 --> 00:18:05,132
The above are steps about adding packages, and adding device drivers.

275
00:18:08,183 --> 00:18:11,393
First one is connecting a USB WiFi dongle to 7688,

276
00:18:11,518 --> 00:18:13,208
so it could connect to the Internet.

277
00:18:13,743 --> 00:18:16,803
Because the on-board WiFi will be used as a Access Point,

278
00:18:17,989 --> 00:18:20,479
to connect with my cellphone or computer.

279
00:18:20,565 --> 00:18:21,985
It needs 2 WiFi connection.

280
00:18:24,873 --> 00:18:27,433
Another one is USB web cam.

281
00:18:27,847 --> 00:18:30,397
Use the camera with ffmpeg to do live streaming,

282
00:18:30,792 --> 00:18:34,652
As a result, I have a small home surveillance camera.

283
00:18:38,523 --> 00:18:40,215
After streaming to a server,

284
00:18:40,215 --> 00:18:43,605
of course you could watch the video on a web page or mobile app.

285
00:18:43,605 --> 00:18:47,475
But I'll skip it.

286
00:18:49,030 --> 00:18:51,890
Adding kernel modules, how to compile and install.

287
00:18:55,764 --> 00:19:00,774
Ok! After boot, you'll find many daemons in the 7688.

288
00:19:01,171 --> 00:19:03,531
If today we are in a class in the school,

289
00:19:03,531 --> 00:19:04,831
The teacher will introduce them one by one, very detailed.

290
00:19:04,831 --> 00:19:06,211
It needs a lot of patience,

291
00:19:06,586 --> 00:19:09,736
to understand thoroughly.

292
00:19:10,744 --> 00:19:15,854
So you could buy a book such as... Ubuntu Linux system admin, and study with it.

293
00:19:16,992 --> 00:19:19,622
or books for LPIC certification,

294
00:19:19,622 --> 00:19:20,962
That's a well-organized material.

295
00:19:21,491 --> 00:19:25,001
Buy LPIC 101, 102 and study.

296
00:19:25,023 --> 00:19:26,363
It will told us,

297
00:19:26,372 --> 00:19:29,122
the utilities and config files for system admin,

298
00:19:29,672 --> 00:19:32,352
Although for some utilities, the config files will have a different path and content

299
00:19:32,352 --> 00:19:34,392
compared to OpenWRT.

300
00:19:34,392 --> 00:19:35,922
But it doesn't matter,

301
00:19:36,282 --> 00:19:39,152
you could adapter yourselves to the new environment.

302
00:19:39,708 --> 00:19:40,918
But, the first,

303
00:19:41,206 --> 00:19:45,206
avahi? Why does it so "high"? (<i>laugh</i>)

304
00:19:45,473 --> 00:19:47,473
avahi... what's that?

305
00:19:47,521 --> 00:19:48,751
It also appeared in Ubuntu.

306
00:19:49,211 --> 00:19:51,161
It's...

307
00:19:52,301 --> 00:19:53,791
mDNS service.

308
00:19:53,791 --> 00:19:57,201
I'll use it later, so just take a quick introduction.

309
00:19:58,565 --> 00:20:01,095
We have a limited time frame today,

310
00:20:02,390 --> 00:20:03,770
In coming up sessions,

311
00:20:04,437 --> 00:20:07,597
Pay your attention to the speech, don't practice by yourself.

312
00:20:07,597 --> 00:20:08,772
It's dangerous to practice,

313
00:20:08,772 --> 00:20:12,482
because you may not be able to catch up.
Leave the practice after the end.

314
00:20:12,578 --> 00:20:16,268
I'll pick up some important diagrams,

315
00:20:16,268 --> 00:20:18,221
to save your time.

316
00:20:18,221 --> 00:20:21,401
There are web server, samba, everybody knows them.

317
00:20:21,401 --> 00:20:23,971
and time sync, NTP time sync.

318
00:20:24,233 --> 00:20:28,333
and dropbear, the ssh server and client.

319
00:20:28,618 --> 00:20:32,618
Those are what everyone familiar with.

320
00:20:34,451 --> 00:20:38,041
After the 7688 boots, you could find this directory (/etc/avahi)

321
00:20:38,164 --> 00:20:40,904
These are config files.

322
00:20:42,573 --> 00:20:44,493
and these are service groups.

323
00:20:44,763 --> 00:20:47,963
and... what's the function of mDNS service?

324
00:20:49,314 --> 00:20:53,414
I'll demo with 7688.

325
00:21:05,442 --> 00:21:07,742
mDNS is important for me,

326
00:21:07,814 --> 00:21:11,814
because part of my job is giving demo for IoT products.

327
00:21:13,393 --> 00:21:17,793
I want to be able to do service discovery in LAN.

328
00:21:17,887 --> 00:21:19,877
To find out what's on the network.

329
00:21:20,519 --> 00:21:25,359
So mDNS, aka zero config, is important for me.

330
00:21:25,485 --> 00:21:28,665
7688 could be discovered via mDNS,

331
00:21:29,336 --> 00:21:33,386
then connect a temperature sensor to 7688 Duo.

332
00:21:34,720 --> 00:21:38,170
An inspiring idea.

333
00:21:38,208 --> 00:21:40,758
Later Yihui will have an introduction for you.

334
00:21:43,651 --> 00:21:48,571
My 7688 should now connected to the same AP... right.

335
00:22:05,704 --> 00:22:06,944
My computer is a Mac,

336
00:22:06,944 --> 00:22:09,924
There's a command...

337
00:22:12,336 --> 00:22:14,586
(dns-sd)

338
00:22:14,983 --> 00:22:19,073
Let's go to the manual page, man page

339
00:22:21,166 --> 00:22:24,176
One of the arguments is like this...

340
00:22:24,601 --> 00:22:27,361
(dns-sd -B _http._tcp)

341
00:22:27,361 --> 00:22:29,241
This is service name (LinkIt Smart7688...)

342
00:22:29,252 --> 00:22:31,135
This is service type (_http._tcp)

343
00:22:31,135 --> 00:22:33,635
So I find the type

344
00:22:33,635 --> 00:22:35,135
which provides the service

345
00:22:40,467 --> 00:22:43,777
(cd /etc/avahi/services)

346
00:22:44,053 --> 00:22:46,293
(cat http.service)

347
00:22:46,293 --> 00:22:47,923
It has lots of fun, really.

348
00:22:47,943 --> 00:22:51,043
I never thought it before, a Linux PC,

349
00:22:51,043 --> 00:22:54,975
a complete Linux command line environment,

350
00:22:54,975 --> 00:22:57,265
Come with a small board which fits into the pocket.

351
00:22:57,746 --> 00:23:00,446
Dev boards are used to be very large before.

352
00:23:00,446 --> 00:23:04,196
When I was studying, I made it like a briefcase.

353
00:23:04,196 --> 00:23:05,306
Somewhat exaggerated.

354
00:23:05,651 --> 00:23:07,901
Now it's evolved into such a small size.

355
00:23:08,221 --> 00:23:10,251
It's very good for us.

356
00:23:10,512 --> 00:23:12,242
This is one of the config files.

357
00:23:14,072 --> 00:23:18,562
On a Mac with mDNS,

358
00:23:18,719 --> 00:23:20,469
I could find this service

359
00:23:23,900 --> 00:23:26,620
After the service was found, I could do this (dns-sd -R ...)

360
00:23:26,620 --> 00:23:29,780
Consult the document for these arguments.

361
00:23:43,575 --> 00:23:46,645
What I want to emphasize,

362
00:23:47,039 --> 00:23:48,429
during this phase,

363
00:23:48,949 --> 00:23:54,129
It has nothing to do with 7688, embedded Linux, etc.

364
00:23:54,529 --> 00:23:58,529
A more important background knowledge, is Linux administration.

365
00:24:01,594 --> 00:24:04,274
This is what just mentioned (service group)

366
00:24:04,274 --> 00:24:06,654
a demo (service discover)

367
00:24:07,744 --> 00:24:13,184
I'll commit the slides to GitHub.

368
00:24:14,385 --> 00:24:19,935
the name on GitHub is ... 7688-embedded-linux

369
00:24:21,726 --> 00:24:23,486
These are my slides,

370
00:24:23,486 --> 00:24:26,426
called index.html

371
00:24:27,116 --> 00:24:28,526
.

372
00:24:29,015 --> 00:24:33,015
You can search for my name on GitHub first,

373
00:24:39,516 --> 00:24:40,846
My name is Jollen.

374
00:24:40,846 --> 00:24:44,846
Go to GitHub and search for "jollen"

375
00:24:44,854 --> 00:24:49,574
You'll find the slides, 7688-embedded-linux.

376
00:24:49,574 --> 00:24:52,467
It's not there now, I haven't commit it.

377
00:24:53,914 --> 00:24:56,064
Just after the of the presentation.

378
00:24:57,064 --> 00:25:01,064
Lastly, I'd like to share something,

379
00:25:03,109 --> 00:25:04,729
not mentioned in the slides.

380
00:25:04,729 --> 00:25:08,859
It will appear in Yihui's slides.

381
00:25:08,859 --> 00:25:11,259
Recently I want to use Wio Link,

382
00:25:11,259 --> 00:25:14,299
an ESP8266 dev board.

383
00:25:14,979 --> 00:25:17,359
This afternoon I spent sometime with it, it's really a good dev board,

384
00:25:17,359 --> 00:25:20,299
I think I won't use NodeMCU anymore,

385
00:25:20,299 --> 00:25:22,569
This afternoon,

386
00:25:23,803 --> 00:25:27,213
I replaced the Wio Link firmware with NodeMCU firmware.

387
00:25:27,213 --> 00:25:29,492
Because it's more convenient to use sensors,

388
00:25:29,492 --> 00:25:32,812
no need to connect daughterboards.

389
00:25:33,853 --> 00:25:37,853
I want to make it a temperature-sensing device,

390
00:25:39,567 --> 00:25:42,057
put them everywhere in my home.

391
00:25:42,057 --> 00:25:46,057
the temperature data could be pushed via some protocol,

392
00:25:46,057 --> 00:25:47,982
to a proxy,

393
00:25:47,982 --> 00:25:50,377
a "proxy" is what we called "gateway" before.

394
00:25:50,377 --> 00:25:54,337
7688 is a good choice as a gateway.

395
00:25:54,646 --> 00:25:56,006
the job of a gateway,

396
00:25:56,006 --> 00:25:58,946
is to collect various sensor data,

397
00:25:58,946 --> 00:26:00,126
and push them to the cloud.

398
00:26:01,033 --> 00:26:04,523
It has such a small size, just what I need.

399
00:26:04,939 --> 00:26:06,739
Because I want to do something,

400
00:26:07,049 --> 00:26:09,549
put it in to a socket.

401
00:26:10,282 --> 00:26:12,472
The wall socket in the home.

402
00:26:13,316 --> 00:26:16,636
If possible, my friends in Shenzen
who is doing hardware manufacturing business,

403
00:26:16,636 --> 00:26:18,686
could help me make it just like ordinary wall socket.

404
00:26:19,832 --> 00:26:22,712
just like "Smart Sockets" in the marketplace which have build-in WiFi.

405
00:26:22,973 --> 00:26:27,103
make it "embedded" inside the socket.

406
00:26:27,963 --> 00:26:31,597
so the dev board won't be exposed in the beautiful home decoration.

407
00:26:31,617 --> 00:26:33,447
Recently an idea came into my mind,

408
00:26:33,915 --> 00:26:36,685
dev boards now could be treated as end products.

409
00:26:37,833 --> 00:26:39,293
.

410
00:26:39,469 --> 00:26:42,169
Dev boards were considered semi-finished products,

411
00:26:43,049 --> 00:26:47,049
After the development finished, laying out a new circuit board from the ground up,

412
00:26:47,228 --> 00:26:49,628
then mechanism design, ID design,

413
00:26:50,146 --> 00:26:52,576
we could only buy them in the store
after such a long procedure.

414
00:26:52,736 --> 00:26:55,616
So I feel that maker age is really lots of fun.

415
00:26:55,616 --> 00:26:58,996
Recently there is a group buying,

416
00:26:59,128 --> 00:27:02,264
I bought lots of boards,

417
00:27:02,264 --> 00:27:06,714
with my spare time such as New Year, Christmas to play around with them,

418
00:27:06,875 --> 00:27:10,105
turing my home into an IoT demo room.

419
00:27:10,932 --> 00:27:14,932
Pull out the pin,

420
00:27:17,094 --> 00:27:21,094
and connect with a electrical relay, put into the wall,

421
00:27:22,064 --> 00:27:23,454
pretty good.

422
00:27:23,527 --> 00:27:26,987
So first, I like the small form factor.

423
00:27:27,064 --> 00:27:31,654
And second, I'm familiar with Linux,

424
00:27:32,900 --> 00:27:35,620
so the development work is not difficult.

425
00:27:35,620 --> 00:27:40,770
Besides programming with the familiar NodeJS,

426
00:27:40,788 --> 00:27:44,308
of course it could be done with native C,

427
00:27:44,308 --> 00:27:46,158
and Python could be used, too.

428
00:27:46,158 --> 00:27:50,178
Team Makee will introduce how to use Python with 7688,

429
00:27:50,178 --> 00:27:54,178
and Bo-Ju Chen is here,

430
00:27:54,178 --> 00:27:56,578
he'll introduce the NodeJS development environment.

431
00:27:57,332 --> 00:28:03,632
After the session, you could have a talk with Yihui,

432
00:28:03,632 --> 00:28:10,672
they just ported Lua to RePhone, a LinkIt ONE platform.

433
00:28:10,672 --> 00:28:13,452
Lua is another good choice,

434
00:28:14,992 --> 00:28:19,692
my Wio Link was turned into a GoPro remote this afternoon,

435
00:28:19,835 --> 00:28:21,465
just developed with Lua.

436
00:28:21,465 --> 00:28:26,445
This is the program I wrote this afternoon.

437
00:28:29,056 --> 00:28:30,596
It was developed with Lua.

438
00:28:30,657 --> 00:28:34,947
Turning Wio Link into a WiFi GoPro remote.

439
00:28:34,947 --> 00:28:36,927
push the button to take a photo.

440
00:28:37,518 --> 00:28:39,728
This part is connecting to the GoPro,

441
00:28:39,728 --> 00:28:43,698
and this is GPIO, interrupt triggering,

442
00:28:44,389 --> 00:28:49,679
After triggered, calling the REST API of GoPro,

443
00:28:51,239 --> 00:28:54,189
There's a web server inside GoPro, it has lots of commands,

444
00:28:55,473 --> 00:28:59,774
Hackers hacked it and put documents on the Internet.

445
00:28:59,774 --> 00:29:04,854
But I felt that it must be a intentionally leaked by GoPro company,

446
00:29:04,925 --> 00:29:07,225
or, it could not have such details.

447
00:29:08,280 --> 00:29:13,300
I just gave a speech in another Makerspace yesterday,

448
00:29:13,597 --> 00:29:18,497
also stated that GoPro is my favorite IoT product until now,

449
00:29:18,617 --> 00:29:20,467
or say WoT product.

450
00:29:21,837 --> 00:29:25,187
We could use boards like Wio Link, 7688,

451
00:29:25,187 --> 00:29:27,527
make peripherals for it in just a few steps.

452
00:29:27,892 --> 00:29:30,792
Hereafter, there will be such a product,

453
00:29:30,922 --> 00:29:32,982
with a build-in server.

454
00:29:32,982 --> 00:29:35,422
Google have an idea, called "physical web",

455
00:29:35,422 --> 00:29:37,102
just like this.

456
00:29:37,402 --> 00:29:39,502
We could work surround such a product,

457
00:29:39,534 --> 00:29:43,134
consider it as a server, and make peripherals for it

458
00:29:43,612 --> 00:29:47,612
this is somewhat outside the topic of my presentation,

459
00:29:47,612 --> 00:29:49,762
just share with you.

460
00:29:49,786 --> 00:29:52,956
.

461
00:29:52,956 --> 00:29:54,766
.

462
00:29:54,872 --> 00:29:57,162
.

463
00:29:57,162 --> 00:30:03,222
Recently, in the MakerPro community,

464
00:30:03,222 --> 00:30:10,132
Chang-You Guo organized a 7688 study road map,

465
00:30:10,132 --> 00:30:12,052
I felt it's a good material.

466
00:30:12,052 --> 00:30:17,262
For example, in my projects, used only 7688, not Duo,

467
00:30:17,569 --> 00:30:22,589
because I used Wio Link or ESP8266 to connect to sensors.

468
00:30:22,753 --> 00:30:26,753
the communication between them,
is not via physical connection such as UART.

469
00:30:26,775 --> 00:30:28,575
It used CoAP protocol.

470
00:30:28,887 --> 00:30:31,357
so in my way of implementation,

471
00:30:31,357 --> 00:30:33,017
I just need 7688.

472
00:30:33,788 --> 00:30:38,758
So 7688, 7688 Duo, or Arduino, their areas of application,

473
00:30:38,758 --> 00:30:41,868
and how to study with them,

474
00:30:41,868 --> 00:30:43,891
Chang-You's article is very good.

475
00:30:43,891 --> 00:30:47,624
So I invited him to go here, have an introduction for everyone,

476
00:30:47,624 --> 00:30:49,453
and what he has learned.

477
00:30:49,453 --> 00:30:52,673
If you have any idea,

478
00:30:52,673 --> 00:30:54,433
.

479
00:30:54,433 --> 00:30:56,643
we could discuss further

480
00:30:56,745 --> 00:30:58,451
Welcome Chang-You,

481
00:30:58,451 --> 00:31:03,881
My session ends here, thank you.
